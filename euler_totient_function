# You need list_of_distinct_prime_factors repository

def give_me_the_list_of_prime_factors(given_number):
    list_of_prime_factors = []

    smallerize_this = given_number

    while smallerize_this > 1:
        if smallerize_this == 1:
            break
        elif smallerize_this == 2:
            list_of_prime_factors.append(2)
            break
        else:
            test_this_divisor = 2
            
            while smallerize_this >= test_this_divisor:
                while smallerize_this % test_this_divisor == 0:
                    smallerize_this = int(smallerize_this / test_this_divisor)
                    list_of_prime_factors.append(test_this_divisor)
                test_this_divisor += 1

    # Only keep distinct prime factors
    list_of_prime_factors = list(dict.fromkeys(list(list_of_prime_factors)))

    return list_of_prime_factors

def euler_totient_function(input_number):
    the_prime_factors = give_me_the_list_of_prime_factors(input_number)

    product = input_number

    for element in the_prime_factors:
        product *= (1 - 1/element)

    return int(product)
